syntax="proto3";


package tmos.x.bank.v1alpha1;

import "core/coin/v1alpha1/coin.proto";

option go_package = "github.com/fdymylja/tmos/x/bank/v1alpha1";

message MsgSendCoins {
  string from_address = 1;
  string to_address = 2;
  repeated core.coin.v1alpha1.Coin amount = 3;
}

message MsgSetBalance {
  string address = 1;
  repeated core.coin.v1alpha1.Coin amount = 2;
}

message Balance {
  // address identifies the user who owns balance TODO: i'd rename this user...
  string address = 1;
  // balance represents the balance of the user
  repeated core.coin.v1alpha1.Coin balance = 2;
}

// GenesisState defines the bank module's genesis state.
message GenesisState {
  // params defines all the paramaters of the module.
  Params params = 1;

  // balances is an array containing the balances of all the accounts.
  repeated Balance balances = 2;

  // supply represents the total supply. If it is left empty, then supply will be calculated based on the provided
  // balances. Otherwise, it will be used to validate that the sum of the balances equals this amount.
  repeated core.coin.v1alpha1.Coin balance = 3;

  // denom_metadata defines the metadata of the differents coins.
  repeated Metadata denom_metadata = 4;
}

// Params defines the parameters for the bank module.
message Params {
  repeated SendEnabled send_enabled         = 1;
  bool                 default_send_enabled = 2;
}

// SendEnabled maps coin denom to a send_enabled status (whether a denom is
// sendable).
message SendEnabled {
  string denom                        = 1;
  bool   enabled                      = 2;
}

// Metadata represents a struct that describes
// a basic token.
message Metadata {
  string description = 1;
  // denom_units represents the list of DenomUnit's for a given coin
  repeated DenomUnit denom_units = 2;
  // base represents the base denom (should be the DenomUnit with exponent = 0).
  string base = 3;
  // display indicates the suggested denom that should be
  // displayed in clients.
  string display = 4;
  // name defines the name of the token (eg: Cosmos Atom)
  string name = 5;
  // symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
  // be the same as the display.
  string symbol = 6;
}

// DenomUnit represents a struct that describes a given
// denomination unit of the basic token.
message DenomUnit {
  // denom represents the string name of the given denom unit (e.g uatom).
  string denom = 1;
  // exponent represents power of 10 exponent that one must
  // raise the base_denom to in order to equal the given DenomUnit's denom
  // 1 denom = 1^exponent base_denom
  // (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
  // exponent = 6, thus: 1 atom = 10^6 uatom).
  uint32 exponent = 2;
  // aliases is a list of string aliases for the given denom
  repeated string aliases = 3;
}

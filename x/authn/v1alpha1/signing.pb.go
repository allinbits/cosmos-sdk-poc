// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.13.0
// source: x/authn/v1alpha1/signing.proto

package v1alpha1

import (
	v1alpha1 "github.com/fdymylja/tmos/x/authn/crypto/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SignMode represents a signing mode with its own security guarantees.
type SignMode int32

const (
	// SIGN_MODE_UNSPECIFIED specifies an unknown signing mode and will be
	// rejected
	SignMode_SIGN_MODE_UNSPECIFIED SignMode = 0
	// SIGN_MODE_DIRECT specifies a signing mode which uses SignDoc and is
	// verified with raw bytes from Tx
	SignMode_SIGN_MODE_DIRECT SignMode = 1
	// SIGN_MODE_TEXTUAL is a future signing mode that will verify some
	// human-readable textual representation on top of the binary representation
	// from SIGN_MODE_DIRECT
	SignMode_SIGN_MODE_TEXTUAL SignMode = 2
	// SIGN_MODE_LEGACY_AMINO_JSON is a backwards compatibility mode which uses
	// Amino JSON and will be removed in the future
	SignMode_SIGN_MODE_LEGACY_AMINO_JSON SignMode = 127
)

// Enum value maps for SignMode.
var (
	SignMode_name = map[int32]string{
		0:   "SIGN_MODE_UNSPECIFIED",
		1:   "SIGN_MODE_DIRECT",
		2:   "SIGN_MODE_TEXTUAL",
		127: "SIGN_MODE_LEGACY_AMINO_JSON",
	}
	SignMode_value = map[string]int32{
		"SIGN_MODE_UNSPECIFIED":       0,
		"SIGN_MODE_DIRECT":            1,
		"SIGN_MODE_TEXTUAL":           2,
		"SIGN_MODE_LEGACY_AMINO_JSON": 127,
	}
)

func (x SignMode) Enum() *SignMode {
	p := new(SignMode)
	*p = x
	return p
}

func (x SignMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignMode) Descriptor() protoreflect.EnumDescriptor {
	return file_x_authn_v1alpha1_signing_proto_enumTypes[0].Descriptor()
}

func (SignMode) Type() protoreflect.EnumType {
	return &file_x_authn_v1alpha1_signing_proto_enumTypes[0]
}

func (x SignMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignMode.Descriptor instead.
func (SignMode) EnumDescriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{0}
}

// SignatureDescriptors wraps multiple SignatureDescriptor's.
type SignatureDescriptors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// signatures are the signature descriptors
	Signatures []*SignatureDescriptor `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignatureDescriptors) Reset() {
	*x = SignatureDescriptors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDescriptors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDescriptors) ProtoMessage() {}

func (x *SignatureDescriptors) ProtoReflect() protoreflect.Message {
	mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDescriptors.ProtoReflect.Descriptor instead.
func (*SignatureDescriptors) Descriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{0}
}

func (x *SignatureDescriptors) GetSignatures() []*SignatureDescriptor {
	if x != nil {
		return x.Signatures
	}
	return nil
}

// SignatureDescriptor is a convenience type which represents the full data for
// a signature including the public key of the signer, signing modes and the
// signature itself. It is primarily used for coordinating signatures between
// clients.
type SignatureDescriptor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// public_key is the public key of the signer
	PublicKey *anypb.Any                `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Data      *SignatureDescriptor_Data `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	// sequence is the sequence of the account, which describes the
	// number of committed transactions signed by a given address. It is used to prevent
	// replay attacks.
	Sequence uint64 `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *SignatureDescriptor) Reset() {
	*x = SignatureDescriptor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDescriptor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDescriptor) ProtoMessage() {}

func (x *SignatureDescriptor) ProtoReflect() protoreflect.Message {
	mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDescriptor.ProtoReflect.Descriptor instead.
func (*SignatureDescriptor) Descriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{1}
}

func (x *SignatureDescriptor) GetPublicKey() *anypb.Any {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SignatureDescriptor) GetData() *SignatureDescriptor_Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *SignatureDescriptor) GetSequence() uint64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

// Data represents signature data
type SignatureDescriptor_Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sum is the oneof that specifies whether this represents single or multi-signature data
	//
	// Types that are assignable to Sum:
	//	*SignatureDescriptor_Data_Single_
	//	*SignatureDescriptor_Data_Multi_
	Sum isSignatureDescriptor_Data_Sum `protobuf_oneof:"sum"`
}

func (x *SignatureDescriptor_Data) Reset() {
	*x = SignatureDescriptor_Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDescriptor_Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDescriptor_Data) ProtoMessage() {}

func (x *SignatureDescriptor_Data) ProtoReflect() protoreflect.Message {
	mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDescriptor_Data.ProtoReflect.Descriptor instead.
func (*SignatureDescriptor_Data) Descriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{1, 0}
}

func (m *SignatureDescriptor_Data) GetSum() isSignatureDescriptor_Data_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *SignatureDescriptor_Data) GetSingle() *SignatureDescriptor_Data_Single {
	if x, ok := x.GetSum().(*SignatureDescriptor_Data_Single_); ok {
		return x.Single
	}
	return nil
}

func (x *SignatureDescriptor_Data) GetMulti() *SignatureDescriptor_Data_Multi {
	if x, ok := x.GetSum().(*SignatureDescriptor_Data_Multi_); ok {
		return x.Multi
	}
	return nil
}

type isSignatureDescriptor_Data_Sum interface {
	isSignatureDescriptor_Data_Sum()
}

type SignatureDescriptor_Data_Single_ struct {
	// single represents a single signer
	Single *SignatureDescriptor_Data_Single `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type SignatureDescriptor_Data_Multi_ struct {
	// multi represents a multisig signer
	Multi *SignatureDescriptor_Data_Multi `protobuf:"bytes,2,opt,name=multi,proto3,oneof"`
}

func (*SignatureDescriptor_Data_Single_) isSignatureDescriptor_Data_Sum() {}

func (*SignatureDescriptor_Data_Multi_) isSignatureDescriptor_Data_Sum() {}

// Single is the signature data for a single signer
type SignatureDescriptor_Data_Single struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mode is the signing mode of the single signer
	Mode SignMode `protobuf:"varint,1,opt,name=mode,proto3,enum=tmos.x.authn.v1alpha1.SignMode" json:"mode,omitempty"`
	// signature is the raw signature bytes
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignatureDescriptor_Data_Single) Reset() {
	*x = SignatureDescriptor_Data_Single{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDescriptor_Data_Single) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDescriptor_Data_Single) ProtoMessage() {}

func (x *SignatureDescriptor_Data_Single) ProtoReflect() protoreflect.Message {
	mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDescriptor_Data_Single.ProtoReflect.Descriptor instead.
func (*SignatureDescriptor_Data_Single) Descriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{1, 0, 0}
}

func (x *SignatureDescriptor_Data_Single) GetMode() SignMode {
	if x != nil {
		return x.Mode
	}
	return SignMode_SIGN_MODE_UNSPECIFIED
}

func (x *SignatureDescriptor_Data_Single) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

// Multi is the signature data for a multisig public key
type SignatureDescriptor_Data_Multi struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// bitarray specifies which keys within the multisig are signing
	Bitarray *v1alpha1.CompactBitArray `protobuf:"bytes,1,opt,name=bitarray,proto3" json:"bitarray,omitempty"`
	// signatures is the signatures of the multi-signature
	Signatures []*SignatureDescriptor_Data `protobuf:"bytes,2,rep,name=signatures,proto3" json:"signatures,omitempty"`
}

func (x *SignatureDescriptor_Data_Multi) Reset() {
	*x = SignatureDescriptor_Data_Multi{}
	if protoimpl.UnsafeEnabled {
		mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureDescriptor_Data_Multi) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureDescriptor_Data_Multi) ProtoMessage() {}

func (x *SignatureDescriptor_Data_Multi) ProtoReflect() protoreflect.Message {
	mi := &file_x_authn_v1alpha1_signing_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureDescriptor_Data_Multi.ProtoReflect.Descriptor instead.
func (*SignatureDescriptor_Data_Multi) Descriptor() ([]byte, []int) {
	return file_x_authn_v1alpha1_signing_proto_rawDescGZIP(), []int{1, 0, 1}
}

func (x *SignatureDescriptor_Data_Multi) GetBitarray() *v1alpha1.CompactBitArray {
	if x != nil {
		return x.Bitarray
	}
	return nil
}

func (x *SignatureDescriptor_Data_Multi) GetSignatures() []*SignatureDescriptor_Data {
	if x != nil {
		return x.Signatures
	}
	return nil
}

var File_x_authn_v1alpha1_signing_proto protoreflect.FileDescriptor

var file_x_authn_v1alpha1_signing_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x26, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e,
	0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x14, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdf,
	0x04, 0x0a, 0x13, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74, 0x6d, 0x6f, 0x73,
	0x2e, 0x78, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x1a, 0xb1, 0x03, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e, 0x61,
	0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x48, 0x00, 0x52,
	0x05, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x1a, 0x5b, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x1a, 0xa3, 0x01, 0x0a, 0x05, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x12, 0x49, 0x0a,
	0x08, 0x62, 0x69, 0x74, 0x61, 0x72, 0x72, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x74, 0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x42, 0x69, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x52, 0x08,
	0x62, 0x69, 0x74, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x4f, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x74,
	0x6d, 0x6f, 0x73, 0x2e, 0x78, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x73, 0x75, 0x6d,
	0x2a, 0x73, 0x0a, 0x08, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x49, 0x47, 0x4e, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x10, 0x01, 0x12, 0x15, 0x0a,
	0x11, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x55,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x49, 0x47, 0x4e, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x5f, 0x41, 0x4d, 0x49, 0x4e, 0x4f, 0x5f, 0x4a,
	0x53, 0x4f, 0x4e, 0x10, 0x7f, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x66, 0x64, 0x79, 0x6d, 0x79, 0x6c, 0x6a, 0x61, 0x2f, 0x74, 0x6d, 0x6f,
	0x73, 0x2f, 0x78, 0x2f, 0x61, 0x75, 0x74, 0x68, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_x_authn_v1alpha1_signing_proto_rawDescOnce sync.Once
	file_x_authn_v1alpha1_signing_proto_rawDescData = file_x_authn_v1alpha1_signing_proto_rawDesc
)

func file_x_authn_v1alpha1_signing_proto_rawDescGZIP() []byte {
	file_x_authn_v1alpha1_signing_proto_rawDescOnce.Do(func() {
		file_x_authn_v1alpha1_signing_proto_rawDescData = protoimpl.X.CompressGZIP(file_x_authn_v1alpha1_signing_proto_rawDescData)
	})
	return file_x_authn_v1alpha1_signing_proto_rawDescData
}

var file_x_authn_v1alpha1_signing_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_x_authn_v1alpha1_signing_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_x_authn_v1alpha1_signing_proto_goTypes = []interface{}{
	(SignMode)(0),                           // 0: tmos.x.authn.v1alpha1.SignMode
	(*SignatureDescriptors)(nil),            // 1: tmos.x.authn.v1alpha1.SignatureDescriptors
	(*SignatureDescriptor)(nil),             // 2: tmos.x.authn.v1alpha1.SignatureDescriptor
	(*SignatureDescriptor_Data)(nil),        // 3: tmos.x.authn.v1alpha1.SignatureDescriptor.Data
	(*SignatureDescriptor_Data_Single)(nil), // 4: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Single
	(*SignatureDescriptor_Data_Multi)(nil),  // 5: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Multi
	(*anypb.Any)(nil),                       // 6: google.protobuf.Any
	(*v1alpha1.CompactBitArray)(nil),        // 7: tmos.x.authn.crypto.v1alpha1.CompactBitArray
}
var file_x_authn_v1alpha1_signing_proto_depIdxs = []int32{
	2, // 0: tmos.x.authn.v1alpha1.SignatureDescriptors.signatures:type_name -> tmos.x.authn.v1alpha1.SignatureDescriptor
	6, // 1: tmos.x.authn.v1alpha1.SignatureDescriptor.public_key:type_name -> google.protobuf.Any
	3, // 2: tmos.x.authn.v1alpha1.SignatureDescriptor.data:type_name -> tmos.x.authn.v1alpha1.SignatureDescriptor.Data
	4, // 3: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.single:type_name -> tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Single
	5, // 4: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.multi:type_name -> tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Multi
	0, // 5: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Single.mode:type_name -> tmos.x.authn.v1alpha1.SignMode
	7, // 6: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Multi.bitarray:type_name -> tmos.x.authn.crypto.v1alpha1.CompactBitArray
	3, // 7: tmos.x.authn.v1alpha1.SignatureDescriptor.Data.Multi.signatures:type_name -> tmos.x.authn.v1alpha1.SignatureDescriptor.Data
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_x_authn_v1alpha1_signing_proto_init() }
func file_x_authn_v1alpha1_signing_proto_init() {
	if File_x_authn_v1alpha1_signing_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_x_authn_v1alpha1_signing_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDescriptors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_authn_v1alpha1_signing_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDescriptor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_authn_v1alpha1_signing_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDescriptor_Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_authn_v1alpha1_signing_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDescriptor_Data_Single); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_x_authn_v1alpha1_signing_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureDescriptor_Data_Multi); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_x_authn_v1alpha1_signing_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*SignatureDescriptor_Data_Single_)(nil),
		(*SignatureDescriptor_Data_Multi_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_x_authn_v1alpha1_signing_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_x_authn_v1alpha1_signing_proto_goTypes,
		DependencyIndexes: file_x_authn_v1alpha1_signing_proto_depIdxs,
		EnumInfos:         file_x_authn_v1alpha1_signing_proto_enumTypes,
		MessageInfos:      file_x_authn_v1alpha1_signing_proto_msgTypes,
	}.Build()
	File_x_authn_v1alpha1_signing_proto = out.File
	file_x_authn_v1alpha1_signing_proto_rawDesc = nil
	file_x_authn_v1alpha1_signing_proto_goTypes = nil
	file_x_authn_v1alpha1_signing_proto_depIdxs = nil
}
